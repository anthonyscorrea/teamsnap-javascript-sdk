{"version":3,"file":"lib/teamsnap.js","sources":["src/auth.coffee","src/collections/assignments.coffee","src/collections/availabilities.coffee","src/collections/contactEmailAddresses.coffee","src/collections/contactPhoneNumbers.coffee","src/collections/contacts.coffee","src/collections/customData.coffee","src/collections/customFields.coffee","src/collections/events.coffee","src/collections/locations.coffee","src/collections/memberEmailAddresses.coffee","src/collections/memberLinks.coffee","src/collections/memberPhoneNumbers.coffee","src/collections/memberPreferences.coffee","src/collections/members.coffee","src/collections/opponents.coffee","src/collections/plans.coffee","src/collections/sports.coffee","src/collections/teamPreferences.coffee","src/collections/teamPublicSites.coffee","src/collections/teams.coffee","src/collections/trackedItemStatuses.coffee","src/collections/trackedItems.coffee","src/collections/users.coffee","src/errors.coffee","src/linking.coffee","src/loadCollections.coffee","src/model.coffee","src/persistence.coffee","src/promises.coffee","src/request.coffee","src/sdk.coffee","src/teamsnap.coffee","src/types.coffee"],"names":[],"mappings":"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","sourcesContent":["teamsnap = require './teamsnap'\nrequest = require './request'\npromises = require './promises'\nrequest = require './request'\nsdk = require './sdk'\njsonMime = 'application/json'\ncollectionJSONMime = 'application/vnd.collection+json'\nbrowserStorageName = 'teamsnap.authToken'\n\n# Sets up requests for the JSON auth services\nauthRequest = request.create().hook (xhr, data) ->\n  xhr.responseType = 'json'\n  xhr.setRequestHeader('Accept', jsonMime)\n  xhr.setRequestHeader('Content-Type', jsonMime) if data\n  xhr.withCredentials = true\n\n# Sets up requests for Collection+JSON API calls\nsdkRequest = request.create().hook (xhr, data) ->\n  xhr.responseType = 'json'\n  xhr.setRequestHeader('Accept', collectionJSONMime)\n  xhr.setRequestHeader('Content-Type', collectionJSONMime) if data\n  xhr.withCredentials = true\n\n\n# Need 3 types of authentications\n# 1. server-side app\n# 2. client-side app\n# 3. teamsnap app\n\n\n# Server Flow:\n# prep: `auth = teamsnap.init(clientId, secret)` on the server\n# 1. create an auth URL using `getServerAuthUrl(redirect, scopes)` and send the\n# user to that URL.\n# 2. parse code=X from the redirect URL once the user has gone there and call\n# `finishServerAuth(code, callback)` to get a token\n# 3. store the token for future use. When acting on the user's behalf get an\n# SDK object with `auth(token)` to load and save data\n\n# Ajax Server Flow:\n# Prep: `auth = teamsnap.init(clientId, secret)` on the server and\n# `auth = teamsnap.init(clientId)` in the browser\n# 1. create an auth URL using `getServerAuthUrl(redirect, scopes)` and call\n# createDialog(url, callback) with that URL in the browser.\n# 2. send the code from the dialog's callback to the server using XMLHttpRequest\n# and call `finishServerAuth(code, callback)` on the server to get a token\n# 3. store the token for future use. When acting on the user's behalf get an\n# SDK object with `auth(token)` on the server to load and save data\n\n# Browser Flow:\n# Prep: `auth = teamsnap.init(clientId)` in the browser\n# 1. create an auth URL using `getBrowserAuthUrl(redirect, scopes)` and call\n# createDialog(url, callback) with that URL in the browser.\n# 2. call `auth(response.access_token)` with response from the dialog to get a\n# SDK object for loading and saving data\n# This entire flow is encapsulted in the isAuthed() and startBrowserAuth()\n# methods which will store the token temporarily in sessionStorage. Note that\n# this should NOT be used when untrusted scripts may be running on the page.\n\n# TeamSnap-owned or CLI apps\n# prep: `auth = teamsnap.init(clientId)` on the client\n# 1. collect user's username and password\n# 2. call `authPassword(username, password, callback)`\n# 3. call `auth(response.access_token)` with response from the previous call\n# to get a SDK object for loading and saving data\n\n\n\nmodule.exports = (clientId, secret) ->\n  unless clientId\n    throw new TSError \"`teamsnap.init(clientId)` must be called in order to use\n      TeamSnap's API. See https://auth.teamsnap.com/ to register an app.\"\n\n\n  # Generates urls\n  generateUrl = (endpoint, params) ->\n    queries = []\n    for key, value of params\n      if value\n        queries.push key + '=' + encodeURIComponent value\n    url = teamsnap.authUrl + '/oauth/' + endpoint + '?' + queries.join('&')\n    url.replace /%20/g, '+'\n\n\n  # Generates the auth url for a resource owner to auth a client\n  generateAuthUrl = (type, redirect, scopes) ->\n    scopes = if Array.isArray(scopes) then scopes.join ' ' else scopes\n    generateUrl 'authorize',\n      response_type: type\n      client_id: clientId\n      redirect_uri: redirect\n      scope: scopes\n\n  # Generates the auth url for a resource owner to auth a client\n  generateTokenUrl = (code) ->\n    generateUrl 'token',\n      grant_type: 'authorization_code'\n      code: code\n      client_id: clientId\n      client_secret: secret\n\n  # Generates the auth url for a resource owner to auth a client\n  generatePasswordUrl = (username, password) ->\n    generateUrl 'token',\n      grant_type: 'password'\n      username: username\n      password: password\n      client_id: clientId\n\n\n\n  # An object which will auth a user and return the SDK\n  return {\n\n    # Return an authed SDK object for use with a single authorized user\n    auth: (token, cachedCollections, callback) ->\n      if typeof token is 'function'\n        callback = token\n        token = null\n      else if typeof token is 'object'\n        callback = cachedCollections\n        cachedCollections = token\n        token = null\n      if typeof cachedCollections is 'function'\n        callback = cachedCollections\n        cachedCollections = null\n\n      # Shortcut for local testing\n      if teamsnap.apiUrl.indexOf(':3000') isnt -1\n        authedRequest = sdkRequest.clone()\n        id = 1\n        id = token if typeof token is 'number'\n        authedRequest.hook (xhr) ->\n          xhr.setRequestHeader 'X-Teamsnap-User-ID', id\n        return sdk authedRequest, cachedCollections, callback\n\n      token = browserStore() unless token\n      unless token\n        throw new TSArgsError 'teamsnap.auth', 'A token is required to auth\n        unless in the browser it has been cached'\n\n      authedRequest = sdkRequest.clone()\n      authedRequest.hook (xhr) ->\n        xhr.setRequestHeader 'X-Teamsnap-Access-Token', token\n      sdk authedRequest, cachedCollections, callback\n\n    # Use to generate a URL for getting a code with a server app.\n    getServerAuthUrl: (redirect, scopes) ->\n      generateAuthUrl 'code', redirect, scopes\n\n    # Use to generate a URL for getting the token with a server app.\n    getServerTokenUrl: (code) ->\n      generateTokenUrl code\n\n    # Use to generate a URL for getting the token with a browser app.\n    getBrowserAuthUrl: (redirect, scopes) ->\n      generateAuthUrl 'token', redirect, scopes\n\n    # Use to generate a URL for getting the token with a CLI app.\n    getPasswordAuthUrl: (username, password) ->\n      generatePasswordUrl username, password\n\n    # Creates an auth dialog opening up the URL and calling the callback once\n    # the dialog has finished. This is used for browser flows or ajax server\n    # flows\n    createDialog: (url, callback) ->\n      createAuthDialog url, callback\n\n    # Get the token from a code retrieved.\n    finishServerAuth: (code, callback) ->\n      authRequest.post @getServerTokenUrl(code), callback\n\n    # Use in a client-side app to authorize a user and get the SDK for that user\n    startBrowserAuth: (redirect, scopes, callback) ->\n      if location.protocol is 'file:'\n        throw new TSError 'TeamSnap.js cannot auth from the file system'\n      @createDialog(@getBrowserAuthUrl redirect, scopes).then((response) =>\n        token = response.access_token\n        browserStore token\n        @auth token # returns the SDK\n      ).callback callback\n\n    # Get a token for the user with username and password\n    startPasswordAuth: (username, password, callback) ->\n      authRequest.post @getPasswordAuthUrl(username, password), callback\n\n    # Checks whether the browser has already received authorization for a user\n    # by returning the SDK if they're authed\n    isAuthed: ->\n      !!browserStore()\n  }\n\n\n\n\n\n# Get or save a token into a browser's store\nbrowserStore = (token) ->\n  return unless global.sessionStorage\n  if arguments.length is 0\n    return sessionStorage.getItem browserStorageName\n  else\n    sessionStorage.setItem browserStorageName, token\n    return\n\n\n# Creates a dialog in browser for oauth\ncreateAuthDialog = (url, callback) ->\n  width = 860\n  height = 720\n\n  deferred = promises.defer()\n\n  # Center the dialog over the current window\n  x = window.screenLeft or window.screenX\n  y = window.screenTop or window.screenY\n  windowWidth = window.innerWidth or\n    document.documentElement.clientWidth or\n    document.body.clientWidth\n  windowHeight = window.innerHeight or\n    document.documentElement.clientHeight or\n    document.body.clientHeight\n  left = x + (windowWidth - width) / 2\n  top = y + (windowHeight - height) / 2\n  dialog = window.open(\n    url\n    'oauth',\n    'menubar=no,scrollbars=no,status=no,toolbar=no,'+\n    'width=' + width + ',height=' + height + ',left=' + left + ',top=' + top\n  )\n\n  # Wait until the dialog is done\n  interval = setInterval ->\n    try\n      if dialog.closed\n        clearInterval interval\n        deferred.reject {\n          error: 'access_denied'\n          error_description: 'The resource owner denied the request.'\n        }\n      return unless dialog.location.host is location.host\n      params = dialog.location.hash.replace(/^#/, '') or\n               dialog.location.search.replace(/^\\?/, '')\n    catch e\n      return\n    clearInterval interval\n    dialog.close()\n    response = {}\n    params.split('&').forEach (param) ->\n      [key, value] = param.split('=')\n      response[decodeURIComponent(key)] =\n        decodeURIComponent(value.replace(/\\+/g, ' '))\n    if response.error\n      deferred.reject(response)\n    else\n      deferred.resolve(response)\n  , 50\n  return deferred.promise.callback callback\n","exports.loadAssignments = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadAssignments', 'must provide a\n      teamId or query parameters'\n\n  @loadItems 'assignment', params, callback\n\n\nexports.createAssignment = (data) ->\n  @createItem data,\n    type: 'assignment'\n    description: ''\n\n\nexports.saveAssignment = (assignment, callback) ->\n  unless assignment\n    throw new TSArgsError 'teamsnap.saveAssignment',\n      \"`assignment` must be provided\"\n  unless @isItem assignment, 'assignment'\n    throw new TSArgsError 'teamsnap.saveAssignment',\n      \"`assignment.type` must be 'assignment'\"\n  unless assignment.memberId\n    return @reject 'You must choose a member.', 'memberId', callback\n  unless assignment.eventId\n    return @reject 'You must choose an event.', 'eventId', callback\n  unless assignment.description?.trim()\n    return @reject 'You must provide a description for the assignment.',\n      'name', callback\n\n  @saveItem assignment, callback\n\n\nexports.deleteAssignment = (assignment, callback) ->\n  unless assignment\n    throw new TSArgsError 'teamsnap.deleteAssignment',\n      '`assignment` must be provided'\n\n  @deleteItem assignment, callback\n\n\n# Sorts assignments by their member, must have assignment.member set to\n# correctly sort\nexports.getAssignmentSort = (reverse) ->\n  (itemA, itemB) =>\n    if !@isItem(itemA, 'assignment') or !@isItem(itemB, 'assignment')\n      valueA = itemA.type\n      valueB = itemB.type\n    else\n      valueA = @memberName(itemA.member, reverse).toLowerCase()\n      valueB = @memberName(itemB.member, reverse).toLowerCase()\n    if valueA > valueB then 1\n    else if valueA < valueB then -1\n    else 0","exports.AVAILABILITIES =\n  NONE: null\n  NO: 0\n  YES: 1\n  MAYBE: 2\n\nstatuses = {}\nfor key, value of exports.AVAILABILITIES\n  statuses[value] = true\n\n\nexports.loadAvailabilities = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadAvailabilities', 'must provide a teamId\n      or query parameters'\n\n  @loadItems 'availability', params, callback\n\n\nexports.saveAvailability = (availability, callback) ->\n  unless availability\n    throw new TSArgsError 'teamsnap.saveAvailability', \"`availability` must be\n      provided\"\n  unless @isItem availability, 'availability'\n    throw new TSArgsError 'teamsnap.saveAvailability', \"`type` must be\n      'availability'\"\n  if trackedItemStatus.statusCode isnt null and\n      not statuses[trackedItemStatus.statusCode]\n    return @reject 'You must select a valid status or null', 'statusCode',\n      callback\n\n  @saveItem availability, callback\n","\nexports.loadContactEmailAddresses = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadContactEmailAddresses', 'must provide a\n      teamId or query parameters'\n\n  @loadItems 'contactEmailAddress', params, callback\n\n\nexports.createContactEmailAddress = (data) ->\n  @createItem data,\n    type: 'contactEmailAddress'\n    receivesTeamEmails: true\n\n\nexports.saveContactEmailAddress = (emailAddress, callback) ->\n  unless emailAddress\n    throw new TSArgsError 'teamsnap.saveContactEmailAddress', '`emailAddress`\n      must be provided'\n  unless @isItem emailAddress, 'contactEmailAddress'\n    throw new TSArgsError 'teamsnap.saveContactEmailAddress',\n      \"`emailAddress.type` must be 'contactEmailAddress'\"\n  unless emailAddress.contactId\n    return @reject 'You must choose a contact.', 'contactId', callback\n\n  @saveItem emailAddress, callback\n\n\nexports.deleteContactEmailAddress = (emailAddress, callback) ->\n  unless emailAddress\n    throw new TSArgsError 'teamsnap.deleteContactEmailAddress',\n      '`emailAddress` must be provided'\n\n  @deleteItem emailAddress, callback\n","\nexports.loadContactPhoneNumbers = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadContactPhoneNumbers', 'must provide a\n      teamId or query parameters'\n\n  @loadItems 'contactPhoneNumber', params, callback\n\n\nexports.createContactPhoneNumber = (data) ->\n  @createItem data,\n    type: 'contactPhoneNumber'\n\n\nexports.saveContactPhoneNumber = (phoneNumber, callback) ->\n  unless phoneNumber\n    throw new TSArgsError 'teamsnap.saveContactPhoneNumber', '`phoneNumber`\n      must be provided'\n  unless @isItem phoneNumber, 'contactPhoneNumber'\n    throw new TSArgsError 'teamsnap.saveContactPhoneNumber',\n      \"`phoneNumber.type` must be 'contactPhoneNumber'\"\n  unless phoneNumber.contactId\n    return @reject 'You must choose a contact.', 'contactId', callback\n\n  @saveItem phoneNumber, callback\n\n\nexports.deleteContactPhoneNumber = (phoneNumber, callback) ->\n  unless phoneNumber\n    throw new TSArgsError 'teamsnap.deleteContactPhoneNumber',\n      '`phoneNumber` must be provided'\n\n  @deleteItem phoneNumber, callback\n","# Load contacts by teamId or query parameters\nexports.loadContacts = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadContacts', 'must provide a teamId or\n      query parameters'\n\n  @loadItems 'contact', params, callback\n\n\nexports.createContact = (data) ->\n  @createItem data,\n    type: 'contact'\n\n\nexports.saveContact = (contact, callback) ->\n  unless contact\n    throw new TSArgsError 'teamsnap.saveContact', \"`contact` must be provided\"\n  unless @isItem contact, 'contact'\n    throw new TSArgsError 'teamsnap.saveContact',\n      \"`contact.type` must be 'contact'\"\n  unless contact.memberId\n    return @reject 'You must choose a member.', 'memberId', callback\n  unless contact.firstName?.trim()\n    return @reject 'You must provide a firstName for the contact.', 'name',\n      callback\n\n  @saveItem contact, callback\n\n\nexports.deleteContact = (contact, callback) ->\n  unless contact\n    throw new TSArgsError 'teamsnap.deleteContact',\n      '`contact` must be provided'\n\n  @deleteItem contact, callback\n","\nexports.loadCustomData = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadCustomData', 'must provide a teamId or\n      query parameters'\n\n  @loadItems 'customDatum', params, callback\n\n\nexports.saveCustomDatum = (customDatum, callback) ->\n  unless customDatum\n    throw new TSArgsError 'teamsnap.saveCustomField', '`customDatum`\n      must be provided'\n  unless @isItem customDatum, 'customDatum'\n    throw new TSArgsError 'teamsnap.saveCustomField',\n      \"`customDatum.type` must be 'customDatum'\"\n  unless customDatum.customFieldId\n    return @reject 'You must choose a custom field.', 'customFieldId', callback\n\n  @saveItem customDatum, callback\n","\nexports.loadCustomFields = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadCustomFields', 'must provide a teamId or\n      query parameters'\n\n  @loadItems 'customField', params, callback\n\n\nexports.createCustomField = (data) ->\n  @createItem data,\n    type: 'customField'\n\n\nexports.saveCustomField = (customField, callback) ->\n  unless customField\n    throw new TSArgsError 'teamsnap.saveCustomField', '`customField`\n      must be provided'\n  unless @isItem customField, 'customField'\n    throw new TSArgsError 'teamsnap.saveCustomField',\n      \"`customField.type` must be 'customField'\"\n  unless customField.teamId\n    return @reject 'You must choose a team.', 'teamId', callback\n  unless customField.name\n    return @reject 'You must enter a name.', 'name', callback\n  unless customField.kind\n    return @reject 'You must choose a type.', 'kind', callback\n\n  @saveItem customField, callback\n\n\nexports.deleteCustomField = (customField, callback) ->\n  unless customField\n    throw new TSArgsError 'teamsnap.deleteCustomField',\n      '`customField` must be provided'\n\n  @deleteItem customField, callback\n","exports.EVENTS =\n  NONE: 'none'\n  FUTURE: 'future'\n  ALL: 'all'\n\nexports.REMINDERS =\n  ALL: 'all'\n  UNSET: 'unset'\n\nincludes = {}\nincludes[value] = true for key, value of exports.EVENTS\n\n\n# Load events by teamId or query parameters\nexports.loadEvents = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadEvents', 'must provide a teamId or\n      query parameters'\n\n  @loadItems 'event', params, callback\n\n\nexports.createEvent = (data) ->\n  @createItem data,\n    type: 'event'\n    isGame: false\n    tracksAvailability: true\n\n\nexports.saveEvent = (event, callback) ->\n  unless event\n    throw new TSArgsError 'teamsnap.saveEvent', \"`event` must be provided\"\n  unless @isItem event, 'event'\n    throw new TSArgsError 'teamsnap.saveEvent', \"`event.type` must be 'event'\"\n  unless event.isGame or event.name?.trim()\n    return @reject 'You must provide a name.', 'name', callback\n  unless event.teamId\n    return @reject 'You must choose a team.', 'teamId', callback\n  unless event.locationId\n    return @reject 'You must choose a location.', 'locationId', callback\n  if event.isGame and not event.opponentId\n    return @reject 'You must choose an opponent.', 'opponentId', callback\n  if isNaN event.startDate?.getTime()\n    return @reject 'You must provide a valid start date.', 'startDate', callback\n\n  @saveItem event, callback\n\n\nexports.deleteEvent = (event, include, callback) ->\n  unless event\n    throw new TSArgsError 'teamsnap.deleteEvent', '`event` must be provided'\n  \n  if typeof include is 'function'\n    callback = include\n    include = null\n\n  if not include and event.repeatingUuid\n    include = @EVENTS.NONE\n\n  if include\n    unless includes[include]\n      throw new TSArgsError 'teamsnap.deleteEvent', \"`include` must be one of\n        #{Object.keys(includes).join(', ')}\"\n    params = repeatingInclude: include\n\n  @deleteItem event, params, callback\n\n\nexports.sendAvailabilityReminders = (eventId, sendingMemberId, include) ->\n  include = 'unset' unless include\n  if @isItem eventId, 'event'\n    eventId = eventId.id\n  if @isItem sendingMemberId, 'member'\n    sendingMemberId = sendingMemberId.id\n  unless @isId eventId\n    throw new TSArgsError 'teamsnap.sendAvailabilityReminders', 'must include id\n      `eventId`'\n  unless @isId sendingMemberId\n    throw new TSArgsError 'teamsnap.sendAvailabilityReminders', 'must include id\n      `sendingMemberId`'\n  unless include is 'all' or include is 'unset'\n    throw new TSArgsError 'teamsnap.sendAvailabilityReminders', \"`include` must\n      be 'all' or 'unset'\"\n\n  options =\n    id: eventId\n    membersToNotify: include\n    notifyTeamAsMemberId: sendingMemberId\n  \n  @collections.events.exec('sendAvailabilityReminders', options)\n\n\n# Returns a sorting function for the default event sort\nexports.getEventSort = ->\n  (itemA, itemB) =>\n    if !@isItem(itemA, 'event') or !@isItem(itemB, 'event')\n      valueA = itemA.type\n      valueB = itemB.type\n    else\n      valueA = itemA.startDate\n      valueB = itemB.startDate\n    if valueA > valueB then 1\n    else if valueA < valueB then -1\n    else 0\n","# Load locations by teamId or query parameters\nexports.loadLocations = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadLocations', 'must provide a teamId or\n      query parameters'\n\n  @loadItems 'location', params, callback\n\n\nexports.createLocation = (data) ->\n  @createItem data,\n    type: 'location'\n    name: ''\n\n\nexports.saveLocation = (location, callback) ->\n  unless location\n    throw new TSArgsError 'teamsnap.saveLocation', \"`location` must be provided\"\n  unless @isItem location, 'location'\n    throw new TSArgsError 'teamsnap.saveLocation', \"`location.type` must be\n      'location'\"\n  unless location.teamId\n    return @reject 'You must choose a team.', 'teamId', callback\n  unless location.name?.trim()\n    return @reject 'You must provide a name for the location.', 'name', callback\n\n  @saveItem location, callback\n\n\nexports.deleteLocation = (location, callback) ->\n  unless location\n    throw new TSArgsError 'teamsnap.deleteLocation',\n      '`location` must be provided'\n\n  @deleteItem location, callback","\nexports.loadMemberEmailAddresses = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadMemberEmailAddresses', 'must provide a\n      teamId or query parameters'\n\n  @loadItems 'memberEmailAddress', params, callback\n\n\nexports.createMemberEmailAddress = (data) ->\n  @createItem data,\n    type: 'memberEmailAddress'\n    receivesTeamEmails: true\n\n\nexports.saveMemberEmailAddress = (emailAddress, callback) ->\n  unless emailAddress\n    throw new TSArgsError 'teamsnap.saveMemberEmailAddress', '`emailAddress`\n      must be provided'\n  unless @isItem emailAddress, 'memberEmailAddress'\n    throw new TSArgsError 'teamsnap.saveMemberEmailAddress',\n      \"`emailAddress.type` must be 'memberEmailAddress'\"\n  unless emailAddress.memberId\n    return @reject 'You must choose a member.', 'memberId', callback\n\n  @saveItem emailAddress, callback\n\n\nexports.deleteMemberEmailAddress = (emailAddress, callback) ->\n  unless emailAddress\n    throw new TSArgsError 'teamsnap.deleteMemberEmailAddress',\n      '`emailAddress` must be provided'\n\n  @deleteItem emailAddress, callback\n","\nexports.loadMemberLinks = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadMemberLinks', 'must provide a teamId or\n      query parameters'\n\n  @loadItems 'memberLink', params, callback\n\n\nexports.createMemberLink = (data) ->\n  @createItem data,\n    type: 'memberLink'\n\n\nexports.saveMemberLink = (memberLink, callback) ->\n  unless memberLink\n    throw new TSArgsError 'teamsnap.saveMemberLink', '`memberLink`\n      must be provided'\n  unless @isItem memberLink, 'memberLink'\n    throw new TSArgsError 'teamsnap.saveMemberLink',\n      \"`memberLink.type` must be 'memberLink'\"\n  unless memberLink.memberId\n    return @reject 'You must choose a member.', 'memberId', callback\n\n  @saveItem memberLink, callback\n\n\nexports.deleteMemberLink = (memberLink, callback) ->\n  unless memberLink\n    throw new TSArgsError 'teamsnap.deleteMemberLink',\n      '`memberLink` must be provided'\n\n  @deleteItem memberLink, callback\n","\nexports.loadMemberPhoneNumbers = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadMemberPhoneNumbers', 'must provide a\n      teamId or query parameters'\n\n  @loadItems 'memberPhoneNumber', params, callback\n\n\nexports.createMemberPhoneNumber = (data) ->\n  @createItem data,\n    type: 'memberPhoneNumber'\n\n\nexports.saveMemberPhoneNumber = (phoneNumber, callback) ->\n  unless phoneNumber\n    throw new TSArgsError 'teamsnap.saveMemberPhoneNumber', '`phoneNumber`\n      must be provided'\n  unless @isItem phoneNumber, 'memberPhoneNumber'\n    throw new TSArgsError 'teamsnap.saveMemberPhoneNumber',\n      \"`phoneNumber.type` must be 'memberPhoneNumber'\"\n  unless phoneNumber.memberId\n    return @reject 'You must choose a member.', 'memberId', callback\n\n  @saveItem phoneNumber, callback\n\n\nexports.deleteMemberPhoneNumber = (phoneNumber, callback) ->\n  unless phoneNumber\n    throw new TSArgsError 'teamsnap.deleteMemberPhoneNumber',\n      '`phoneNumber` must be provided'\n\n  @deleteItem phoneNumber, callback\n","\nexports.loadMembersPreferences = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadMembersPreferences', 'must provide a\n      teamId or query parameters'\n\n  @loadItems 'memberPreferences', params, callback\n\n\n# Singular version\nexports.loadMemberPreferences = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadMemberPreferences', 'must provide a\n      teamId or query parameters'\n\n  @loadItem 'memberPreferences', params, callback\n\n\nexports.saveMemberPreferences = (memberPreferences, callback) ->\n  unless memberPreferences\n    throw new TSArgsError 'teamsnap.saveMemberPreferences',\n      \"`memberPreferences` must be provided\"\n  unless @isItem memberPreferences, 'memberPreferences'\n    throw new TSArgsError 'teamsnap.saveMemberPreferences',\n      \"`memberPreferences.type` must be 'memberPreferences'\"\n\n  @saveItem memberPreferences, callback\n\n\nexports.saveTeamPreferences = (teamPreferences, callback) ->\n  unless teamPreferences\n    throw new TSArgsError 'teamsnap.saveTeamPreferences',\n      \"`teamPreferences` must be provided\"\n  unless @isItem teamPreferences, 'teamPreferences'\n    throw new TSArgsError 'teamsnap.saveTeamPreferences',\n      \"`teamPreferences.type` must be 'teamPreferences'\"\n\n  @saveItem teamPreferences, callback\n","# Load members by teamId or query parameters\nexports.loadMembers = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadMembers', 'must provide a teamId or\n      query parameters'\n\n  @loadItems 'member', params, callback\n\n\nexports.createMember = (data) ->\n  @createItem data,\n    type: 'member'\n\n\nexports.saveMember = (member, callback) ->\n  unless member\n    throw new TSArgsError 'teamsnap.saveMember', \"`member` must be provided\"\n  unless @isItem member, 'member'\n    throw new TSArgsError 'teamsnap.saveMember', \"`type` must be 'member'\"\n  unless member.teamId\n    return @reject 'You must choose a team.', 'teamId', callback\n  unless member.firstName?.trim()\n    return @reject 'You must provide a firstName for the member.', 'name',\n    callback\n\n  @saveItem member, callback\n\n\nexports.deleteMember = (member, callback) ->\n  unless member\n    throw new TSArgsError 'teamsnap.deleteMember', '`member` must be provided'\n\n  @deleteItem member, callback\n\n\n# Member photo\nexports.deleteMemberPhoto = (memberId) ->\n  unless memberId\n    throw new TSArgsError 'teamsnap.deleteMemberPhoto', \"`memberId` must be\n      provided\"\n  if @isItem memberId, 'member'\n    memberId = memberId.id\n  unless @isId memberId\n    throw new TSArgsError 'teamsnap.deleteMemberPhoto', \"`memberId` must be\n      a valid id\"\n\n  params = memberId: memberId\n  @collections.members.exec('removeOriginalPhoto', params)\n    .pop().callback callback\n\n\nexports.deleteMemberThumbnail = (memberId) ->\n  unless memberId\n    throw new TSArgsError 'teamsnap.deleteThumbnail', \"`memberId` must be\n      provided\"\n  if @isItem memberId, 'member'\n    memberId = memberId.id\n  unless @isId memberId\n    throw new TSArgsError 'teamsnap.deleteThumbnail', \"`memberId` must be\n      a valid id\"\n\n  params = memberId: memberId\n  @collections.members.exec('removeThumbnailPhoto', params)\n    .pop().callback callback\n\n\nexports.generateThumbnail = (memberId, x, y, width, height) ->\n  unless member? and x? and y? and width? and height?\n    throw new TSArgsError 'teamsnap.generateThumbnail', \"`memberId`, `x`, `y`,\n      `width`, and `height` are all required\"\n  if @isItem memberId, 'member'\n    memberId = memberId.id\n  unless @isId memberId\n    throw new TSArgsError 'teamsnap.generateThumbnail', \"`memberId` must be\n      a valid id\"\n\n  params =\n    memberId: member.id\n    cropX: x\n    cropY: y\n    cropWidth: width\n    cropHeight: height\n  @collections.members.exec('generateThumbnailPhoto', params)\n    .pop().callback callback\n\n\n# Helper to output a member's name, forward or reverse (reverse will use comma)\nexports.memberName = (member, reverse) ->\n  return '' unless member\n  if reverse and member.firstName and member.lastName\n    return member.lastName + ', ' + member.firstName\n  [ member.firstName or '', member.lastName or '' ].join(' ').trim()\n\n\n# Returns a sorting function to sort members by firstName, lastName (or reverse)\nexports.getMemberSort = (reverse) ->\n  (itemA, itemB) =>\n    if !@isItem(itemA, 'member') or !@isItem(itemB, 'member')\n      valueA = itemA.type\n      valueB = itemB.type\n    else\n      valueA = @memberName(itemA, reverse).toLowerCase()\n      valueB = @memberName(itemB, reverse).toLowerCase()\n    if valueA > valueB then 1\n    else if valueA < valueB then -1\n    else 0\n\n\n# Helper for determining if a member has general write permissions to the team\nexports.canEditTeam = (member, team) ->\n  return false unless member and team\n  (member.isManager or member.isOwner) and\n  (not team.isArchivedSeason or member.isOwner)\n\n\n# Helper for determining if a member has specific write permissions for an item\nexports.canEditItem = (member, team, item) ->\n  return false unless member and team and @isItem item\n  return false if item.readOnly\n  return true if teamsnap.canEditTeam member, team\n  return false if team.isArchivedSeason\n  if @isItem item, 'member'\n    item.id is member.id\n  else\n    item.memberId is member.id\n","# Load opponents by teamId or query parameters\nexports.loadOpponents = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadOpponents', 'must provide a teamId or\n      query parameters'\n\n  @loadItems 'opponent', params, callback\n\n\nexports.createOpponent = (data) ->\n  @createItem data,\n    type: 'opponent'\n    name: ''\n\n\nexports.saveOpponent = (opponent, callback) ->\n  unless opponent\n    throw new TSArgsError 'teamsnap.saveOpponent', \"`opponent` must be provided\"\n  unless @isItem opponent, 'opponent'\n    throw new TSArgsError 'teamsnap.saveOpponent', \"`opponent.type` must be\n      'opponent'\"\n  unless opponent.teamId\n    return @reject 'You must choose a team.', 'teamId', callback\n  unless opponent.name?.trim()\n    return @reject 'You must provide a name for the opponent.', 'name', callback\n\n  @saveItem opponent, callback\n\n\nexports.deleteOpponent = (opponent, callback) ->\n  unless opponent\n    throw new TSArgsError 'teamsnap.deleteOpponent',\n      '`opponent` must be provided'\n\n  @deleteItem opponent, callback","exports.loadPlans = (params, callback) ->\n  unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadPlans', 'must provide query parameters'\n\n  @loadItems 'plan', params, callback\n\n\nexports.loadPlan = (teamId, callback) ->\n  unless @isId teamId\n    throw new TSArgsError 'teamsnap.loadPlan', 'must provide a teamId'\n  params = teamId: teamId\n  @loadItem 'plan', params, callback","exports.loadSports = (params, callback) ->\n  unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadSports', 'must provide query parameters'\n\n  @loadItems 'sport', params, callback\n\n\nexports.loadSport = (teamId, callback) ->\n  unless @isId teamId\n    throw new TSArgsError 'teamsnap.loadSport', 'must provide a teamId'\n  params = teamId: teamId\n  @loadItem 'sport', params, callback","\nexports.loadTeamsPreferences = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadTeamPreferences', 'must provide a\n      teamId or query parameters'\n\n  @loadItems 'teamPreferences', params, callback\n\n\n# Singular version\nexports.loadTeamPreferences = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadTeamPreferences', 'must provide a\n      teamId or query parameters'\n\n  @loadItem 'teamPreferences', params, callback\n\n\nexports.saveTeamPreferences = (teamPreferences, callback) ->\n  unless teamPreferences\n    throw new TSArgsError 'teamsnap.saveTeamPreferences',\n      \"`teamPreferences` must be provided\"\n  unless @isItem teamPreferences, 'teamPreferences'\n    throw new TSArgsError 'teamsnap.saveTeamPreferences',\n      \"`teamPreferences.type` must be 'teamPreferences'\"\n\n  @saveItem teamPreferences, callback\n","exports.loadTeamPublicSites = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadTeamPublicSites', 'must provide a teamId\n      or query parameters'\n\n  @loadItems 'teamPublicSite', params, callback\n\n\nexports.loadTeamPublicSite = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadTeamPublicSite', 'must provide a teamId\n      or query parameters'\n\n  @loadItem 'teamPublicSite', params, callback\n\n\nexports.saveTeamPublicSite = (teamPublicSite, callback) ->\n  unless teamPublicSite\n    throw new TSArgsError 'teamsnap.saveTeamPublicSite',\n      \"`teamPublicSite` must be provided\"\n  unless @isItem teamPublicSite, 'teamPublicSite'\n    throw new TSArgsError 'teamsnap.saveTeamPublicSite',\n      \"`teamPublicSite.type` must be 'teamPublicSite'\"\n\n  @saveItem teamPublicSite, callback","# Loads all teams the current user has access to\nexports.loadTeams = (params = {}, callback) ->\n  if typeof params is 'function'\n    callback = params\n    params = {}\n  params.userId = @me.id\n  @loadItems 'team', params, callback\n\n\n# Load a single team\nexports.loadTeam = (teamId, callback) ->\n  unless @isId teamId\n    throw new TSArgsError 'teamsnap.loadTeam', 'teamId must be provided'\n  @loadItem 'team', teamId: teamId, callback\n\n\nexports.createTeam = (data) ->\n  @createItem data,\n    type: 'team'\n    name: ''\n\n\nexports.saveTeam = (team, callback) ->\n  unless team\n    throw new TSArgsError 'teamsnap.saveTeam', \"`team` must be provided\"\n  unless @isItem team, 'team'\n    throw new TSArgsError 'teamsnap.saveTeam', \"`type` must be 'team'\"\n  unless team.name?.trim()\n    return @reject 'You must provide a name for the team.', 'name', callback\n\n  @saveItem team, callback\n\n\nexports.deleteTeam = (team, callback) ->\n  unless team\n    throw new TSArgsError 'teamsnap.deleteTeam',\n      '`team` must be provided'\n\n  @deleteItem team, callback\n\n\n\n# Loads all items associated with a team, optionally limited by the types array\nexports.bulkLoad = (teamId, types, callback) ->\n  unless @isId teamId\n    throw new TSArgsError 'teamsnap.bulkLoad', 'teamId must be provided'\n\n  if typeof types is 'function'\n    callback = types\n    types = null\n\n  unless Array.isArray types\n    types = @getTeamTypes()\n\n  params = teamId: teamId, types: types.map(@underscoreType).join(',')\n  @collections.root.queryItems 'bulkLoad', params, callback\n\n\nexports.invite = (options = {}) ->\n  cleanArray options, 'memberId'\n  cleanArray options, 'contactId'\n\n  unless options.memberId or options.contactId\n    throw new TSArgsError 'teamsnap.invite', 'options.memberId or\n      options.contactId is required.'\n\n  unless options.teamId\n    throw new TSArgsError 'teamsnap.invite', 'options.teamId is required.'\n\n  unless options.notifyAsMemberId\n    throw new TSArgsError 'teamsnap.invite', 'options.notifyAsMemberId is\n      required.'\n\n  @collections.teams.exec('invite', options)\n\n# Converts memberId or memberIds into an array\ncleanArray = (obj, prop) ->\n  plural = prop + 's'\n  if obj[plural]\n    obj[prop] = obj[plural]\n    delete obj[plural]\n  if Array.isArray obj[prop]\n    obj[prop] = obj[prop].join(',')\n  obj\n","exports.TRACKING =\n  NONE: 0\n  CHECK: 1\n  X: 2\n\nstatuses = {}\nfor key, value of exports.TRACKING\n  statuses[value] = true\n\nexports.loadTrackedItemStatuses = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadTrackedItemStatuses', 'must provide a\n      teamId or query parameters'\n\n  @loadItems 'trackedItemStatus', params, callback\n\n\nexports.saveTrackedItemStatus = (trackedItemStatus, callback) ->\n  unless trackedItemStatus\n    throw new TSArgsError 'teamsnap.saveTrackedItemStatus',\n      \"`trackedItemStatus` must be provided\"\n  unless @isItem trackedItemStatus, 'trackedItemStatus'\n    throw new TSArgsError 'teamsnap.saveTrackedItemStatus',\n      \"`trackedItemStatus.type` must be 'trackedItemStatus'\"\n  unless statuses[trackedItemStatus.statusCode]\n    return @reject 'You must select a valid status', 'statusCode', callback\n\n  @saveItem trackedItemStatus, callback","# Tracked Items\nexports.loadTrackedItems = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadTrackedItems', 'must provide a teamId or\n      query parameters'\n\n  @loadItems 'trackedItem', params, callback\n\n\nexports.createTrackedItem = (data) ->\n  @createItem data,\n    type: 'trackedItem'\n    name: ''\n\n\nexports.saveTrackedItem = (trackedItem, callback) ->\n  unless trackedItem\n    throw new TSArgsError 'teamsnap.saveTrackedItem',\n      \"`trackedItem` must be provided\"\n  unless @isItem trackedItem, 'trackedItem'\n    throw new TSArgsError 'teamsnap.saveTrackedItem',\n      \"`trackedItem.type` must be 'trackedItem'\"\n  unless trackedItem.teamId\n    return @reject 'You must choose a team.', 'teamId', callback\n  unless trackedItem.name?.trim()\n    return @reject 'You must provide a name for the trackedItem.', 'name',\n      callback\n\n  @saveItem trackedItem, callback\n\n\nexports.deleteTrackedItem = (trackedItem, callback) ->\n  unless trackedItem\n    throw new TSArgsError 'teamsnap.deleteTrackedItem',\n      '`trackedItem` must be provided'\n\n  @deleteItem trackedItem, callback\n    \n\nexports.getTrackedItemSort = ->\n  (itemA, itemB) =>\n    if !@isItem(itemA, 'trackedItem') or !@isItem(itemB, 'trackedItem')\n      valueA = itemA.type\n      valueB = itemB.type\n    else\n      valueA = itemA.createdAt\n      valueB = itemB.createdAt\n    if valueA < valueB then 1\n    else if valueA > valueB then -1\n    else 0","exports.loadUsers = (params, callback) ->\n  if @isId params\n    params = teamId: params\n  else unless params and typeof params is 'object'\n    throw new TSArgsError 'teamsnap.loadUsers', 'must provide a teamId or\n      query parameters'\n\n  @loadItems 'user', params, callback\n\n\nexports.saveUser = (user, callback) ->\n  unless user\n    throw new TSArgsError 'teamsnap.saveUser', \"`user` must be provided\"\n  unless @isItem user, 'user'\n    throw new TSArgsError 'teamsnap.saveUser', \"`user.type` must be\n      'user'\"\n  unless user.email?.trim()\n    return @reject 'You must provide an email for the user.', 'email', callback\n\n  @saveItem user, callback","teamsnap = require '../teamsnap'\n\n\n# General TeamSnap error\nclass TSError extends Error\n  constructor: (message) ->\n    super()\n    @name = 'TeamSnapError'\n    @message = message\n\n# Error used when there are missing arguments or arguments of the wrong type\nclass TSArgsError extends TypeError\n  constructor: (method, msg) ->\n    super()\n    @name = 'TeamSnapArgumentError'\n    @message = \"Failed to execute `#{method}`: #{msg}.\"\n\n# Error used for validation errors in forms\nclass TSValidationError extends RangeError\n  constructor: (message, field) ->\n    super()\n    @name = 'TeamSnapValidationError'\n    @message = message\n    @field = field\n\n# Error used when there was a problem from the server\nclass TSServerError extends Error\n  constructor: (message) ->\n    super()\n    @name = 'TeamSnapServerError'\n    @message = message or\n               'An unknown error occurred on TeamSnap\\'s server.'\n\n  @create: (message, jqxhr) -> new TSServerError(message, jqxhr)\n\n\nglobal.TSError = TSError\nglobal.TSArgsError = TSArgsError\nglobal.TSValidationError = TSValidationError\nglobal.TSServerError = TSServerError\n","# Provides functionality for associating items together (looking at their links\n# and setting references to each other on the items, such as setting the member\n# on an availability or all members in an array on a team). Most of this\n# functionality is non-public, only linkItems and unlinkItems should be exposed\n# on the SDK.\ntypes = require './types'\n\n# associates a list of items with each other by their links\nlinkItems = (items, lookup = {}) ->\n  return unless items\n  if Array.isArray items\n    items.forEach (item) -> lookup[item.href] = item if item.href\n    items.forEach (item) -> linkItem(item, lookup)\n  else\n    lookup[items.href] = items if items.href\n    linkItem(items, lookup)\n\n\n# disassociates a list of items with each that were associated\nunlinkItems = (items, lookup = {}) ->\n  return unless items\n  if Array.isArray items\n    items.forEach (item) -> unlinkItem item, lookup\n  else\n    unlinkItem items, lookup\n\n\nlinkItem = (item, lookup) ->\n  return unless item.href\n  throw new TSArgsError('linkItem', 'lookup must be provided') unless lookup\n  lookup[item.href] = item\n  item.links.each (rel, href) ->\n    if types.isPluralType rel\n      item[rel] = [] unless item[rel]\n    else\n      return unless (related = lookup[href])\n      item[rel] = related\n      linkItemWith(item, related)\n\n\nlinkItemWith = (item, other) ->\n  plural = types.getPluralType item.type\n  if plural and other.links.has plural\n    other[plural] = [] unless other[plural]\n    unless other[plural].indexOf(item) isnt -1\n      other[plural].push item\n  else\n    other.links.each (rel, href) ->\n      if href is item.href\n        other[rel] = item\n\n\nunlinkItem = (item, lookup) ->\n  return unless item.href\n  if lookup[item.href] is item\n    delete lookup[item.href]\n\n  item.links.each (rel, href) ->\n    return unless item[rel]\n    if types.isPluralType rel\n      unlinkItemsFrom(item[rel], item.href)\n    else\n      unlinkItemFrom(item, item[rel])\n    delete item[rel]\n\n\nunlinkItemFrom = (item, other) ->\n  plural = types.getPluralType item.type\n  if plural and other.links.has(plural) and other[plural]\n    index = other[plural].indexOf(item)\n    other[plural].splice(index, 1) if index isnt -1\n  else\n    other.links.each (rel, href) ->\n      if other[rel] is item\n        delete other[rel]\n\n\n# disassociate the list of items from only the item with href `fromHref`\nunlinkItemsFrom = (items, fromHref) ->\n  items.forEach (item) ->\n    item.links.each (rel, href) ->\n      if href is fromHref\n        delete item[rel]\n\n\nexports.linkItems = linkItems\nexports.unlinkItems = unlinkItems\nexports.linkItem = linkItem\nexports.linkItemWith = linkItemWith\nexports.unlinkItem = unlinkItem\nexports.unlinkItemFrom = unlinkItemFrom\nexports.unlinkItemsFrom = unlinkItemsFrom\n","promises = require './promises'\ntypes = require './types'\n{ Collection } = require './model'\n\n# Load the root teamsnap collections just once\ncollectionsPromise = null\n\n# First time loads from cache or server, after that returns resolved promise\nmodule.exports = (request, cachedCollections) ->\n  # Loads all collections for the TeamSnap API once\n  if not collectionsPromise or collectionsPromise.getStatus() is 'reject'\n    if (cachedCollections)\n      collections = {}\n      for key, value of cachedCollections\n        collections[key] = new Collection(value)\n      collectionsPromise = promises.resolve collections\n    else\n      collectionsPromise = request.get(teamsnap.apiUrl).then (xhr) ->\n        collections = {}\n        collections.root = root = Collection.fromData xhr.response\n        loads = []\n        types.getTypes().forEach (type) ->\n          rel = types.getPluralType type\n          if root.links.has rel\n            loads.push request.get(root.links.href rel).then (xhr) ->\n              collections[rel] = Collection.fromData xhr.response\n\n        promises.when(loads...).then ->\n          collections\n\n  collectionsPromise","promises = require './promises'\n\n# A representation of a Collection+JSON collection\nclass Collection\n\n  @fromData: (data) ->\n    new Collection().deserialize(data)\n\n  constructor: (data = {}) ->\n    @href = data.href\n    @links = new MetaList(data.links)\n    @queries = new MetaList(data.queries)\n    @commands = new MetaList(data.commands)\n    @template = data.template or []\n    @items = data.items if data.items\n\n  # Deserialize the data from the server into this collection object\n  deserialize: (data) ->\n    data = data.collection if data.collection\n    return unless data\n    @href = data.href\n    @links.deserialize data.links\n    @queries.deserialize data.queries\n    @commands.deserialize data.commands\n    @template = data.template?.data or []\n    if data.items?.length\n      @items = data.items # Not Item objects, just the data for scoped to turn\n    this\n\n\n# Wraps a collection adding a request object scoped for a given user\nclass ScopedCollection extends Collection\n\n  @fromData: (request, data) ->\n    new ScopedCollection request, new Collection().deserialize(data)\n\n  constructor: (@_request, collection) ->\n    @href = collection.href\n    @links = collection.links\n    @queries = collection.queries\n    @commands = collection.commands\n    @template = collection.template\n    if collection.items\n      @items = Item.fromArray @_request, collection.items\n\n  # Save an item to the collection\n  save: (item, callback) ->\n    item = Item.create(@_request, item) unless item instanceof Item\n    method = if item.href then 'put' else 'post'\n    data = item.serialize @template\n\n    # Don't send a request if there is nothing to save\n    if data.template.data.length is 0\n      return promises.resolve(item).callback callback\n\n    @_request(method, item.href or @href, data).then((xhr) =>\n      if (items = xhr.response?.collection?.items)\n        if items.length > 1\n          item.deserialize items.shift()\n          all = Item.fromArray @_request, items\n          all.unshift(item)\n          all\n        else if items.length\n          item.deserialize xhr.response\n    ).callback callback\n\n  # Load a link as an array of items\n  loadItems: (linkName, callback) ->\n    @links.loadItems @_request, linkName, callback\n\n  # Load a link as a single item\n  loadItem: (linkName, callback) ->\n    @links.loadItem @_request, linkName, callback\n\n  # Query the collection with a given query and parameters\n  queryItems: (queryName, params, callback) ->\n    @queries.loadItems @_request, queryName, params, callback\n\n  # Query the collection with a given query and parameters\n  queryItem: (queryName, params, callback) ->\n    @queries.loadItem @_request, queryName, params, callback\n\n  # Execute a command on the collection with the given parameters\n  exec: (commandName, params, callback) ->\n    @commands.exec @_request, commandName, params, callback\n\n\n\n# A representation of a Collection+JSON item\nclass Item\n\n  @create: (request, data) ->\n    new Item(request, data)\n\n  @fromArray: (request, array) ->\n    if Array.isArray array\n      array.map (data) ->\n        Item.fromData(request, data)\n    else\n      array\n\n  @fromData: (request, data) ->\n    if data.collection or data.data\n      @create(request).deserialize(data)\n    else\n      @create(request, data)\n\n  constructor: (@_request, data) ->\n    if typeof data is 'string'\n      @href = data\n    else if data and typeof data is 'object'\n      copy data, this\n    @links = new MetaList(data?.links)\n\n  # Deserialize the data from the server into this item object\n  deserialize: (data) ->\n    data = data.collection.items?[0] if data?.collection\n    return unless data\n    @href = data.href\n    @links.deserialize data.links\n    for prop in data.data\n      value = prop.value\n      if prop.type is 'DateTime' and value\n        value = new Date(value)\n\n      if prop.name is 'type'\n        value = camelize(value)\n\n      @[camelize prop.name] = value\n    this\n\n  # Serialize the data into an object to send to the server for saving\n  serialize: (template) ->\n    unless template?.length\n      throw new TSError 'You must provide the collection\\'s template'\n    fields = []\n    item = this\n    template.forEach (prop) ->\n      value = item[camelize prop.name]\n      if prop.name is 'type'\n        value = underscore value\n      if value isnt undefined\n        fields.push name: prop.name, value: value\n    template: data: fields\n\n  # Load a link as an array of items\n  loadItems: (linkName, callback) ->\n    @links.loadItems @_request, linkName, callback\n\n  # Load a link as a single item\n  loadItem: (linkName, callback) ->\n    @links.loadItem @_request, linkName, callback\n\n  # Delete this item\n  delete: (params, callback) ->\n    if typeof params is 'function'\n      callback = params\n      params = null\n    \n    if params\n      fields = []\n      for own key, value of params\n        fields.push name: underscore(key), value: value\n      data = template: data: fields\n    @_request.delete(@href, data).callback callback\n\n\n\n# Handles lists of links, queries, and commands\nclass MetaList\n  constructor: (data) ->\n    copy data, this if data\n\n  # Deserialize the data from the server into this list object\n  deserialize: (data) ->\n    return unless Array.isArray data\n\n    for entry in data\n      params = {}\n      if Array.isArray entry.data\n        for param in entry.data\n          params[camelize param.name] = param.value\n\n      @[camelize entry.rel] = href: entry.href, params: params\n\n  # Checks whether a given link, query, or command exists\n  has: (rel) ->\n    @hasOwnProperty rel\n\n  # Returns the href of a given entry\n  href: (rel) ->\n    @[rel]?.href\n\n  # Iterates over each entry calling the given function and returning the\n  # results as an array. The iterator has the signature\n  # `function(rel, href, params) {}`\n  each: (iterator) ->\n    for own rel, entry of this\n      iterator rel, entry.href, entry.params\n\n  # Load a link or query as an array of items\n  loadItems: (request, rel, params, callback) ->\n    if typeof params is 'function'\n      callback = params\n      params = undefined\n    @_request(request, 'get', rel, params, 'items').callback callback\n\n  # Load a link or query as a single item\n  loadItem: (request, rel, params, callback) ->\n    if typeof params is 'function'\n      callback = params\n      params = undefined\n    @_request(request, 'get', rel, params, 'item').callback callback\n\n  # Execute a command with the given parameters\n  exec: (request, rel, params, callback) ->\n    if typeof params is 'function'\n      callback = params\n      params = undefined\n    @_request(request, 'post', rel, params, 'items').callback callback\n\n  # Private method to run links\n  _request: (request, method, rel, params, type) ->\n    unless (entry = @[rel])\n      throw new TSError \"Unable to find rel '#{rel}'\"\n\n    if params\n      data = {}\n      for own key, value of params\n        if entry.params.hasOwnProperty(key)\n          data[underscore key] = value\n\n    request(method, entry.href, data).then (xhr) ->\n      items = Item.fromArray(request, xhr.response.collection?.items) or []\n      if type is 'item' then items.pop() else items\n\n\n# Utility functions\ncopy = (from, to) ->\n  Object.keys(from).forEach (key) ->\n    return if typeof value is 'function' or key.charAt(0) is '_'\n    to[key] = from[key]\n  to\n\ncamelize = (str) ->\n  str.replace /[-_]+(\\w)/g, (_, char) ->\n    char.toUpperCase()\n\nunderscore = (str) ->\n  str.replace /[A-Z]/g, (char) ->\n    '_' + char.toLowerCase()\n\n\n\nexports.Collection = Collection\nexports.ScopedCollection = ScopedCollection\nexports.Item = Item\nexports.MetaList = MetaList\n","# Provides a method for enabling persistence which will associate all items\n# loaded and keep only one copy of each item in memory even if it may be loaded\n# multiple times. This makes working with a team's data in-memory very easy. To\n# \"unload\" an item or list of items from memory after enabling persistence, use\n# disassociateItems and they'll be removed.\npromises = require './promises'\nlinking = require './linking'\ntypes = require './types'\n{ ScopedCollection, Item, MetaList } = require './model'\n\nlookup = null\n\n\n# Enables persistence: storing all loaded items and associating them, keeping\n# only one copy of each item in memory, automatically disassociating items when\n# deleted, and allowing items to be reset to their saved state on demand.\nexports.enablePersistence = ->\n  return if lookup # already enabled\n  @persistenceEnabled = true\n  lookup = {}\n  modifyModel()\n  modifySDK(this)\n\n\n# Turns off persistence and disassociates all items currently persisted to allow\n# for garbage collection\nexports.disablePersistence = ->\n  return unless lookup\n  @persistenceEnabled = false\n  lookup = null\n  linking.unlinkItems (Object.keys(lookup).map (href) -> lookup[href]), lookup\n  revertModel()\n  revertSDK(this)\n\n\nexports.findItem = (href) ->\n  lookup?[href]\n\n\n\nmodifyModel = ->\n  # Hook into link loading to link items\n  wrapMethod MetaList.prototype, '_request', (_request) ->\n    (request, method, rel, params, type) ->\n      _request.call(this, request, method, rel, params, type).then (items) ->\n        if Array.isArray items\n          linking.linkItems(items, lookup)\n          items.forEach (item) -> item.saveState()\n          items\n\n  # Hook into ScopedCollection.save to register/update saved items\n  wrapMethod ScopedCollection.prototype, 'save', (save) ->\n    (item, callback) ->\n      save.call(this, item).then((item) ->\n        if Array.isArray item\n          item.map (item) ->\n            linking.linkItem(item, lookup)\n            item.saveState()\n        else\n          linking.linkItem(item, lookup)\n          item.saveState()\n      ).callback callback\n\n  # Hook into Item.delete to unregister deleted items or remove if not saved\n  wrapMethod Item.prototype, 'delete', (deleteItem) ->\n    (params, callback) ->\n      item = this\n      linking.unlinkItem item, lookup\n      deleteItem.call(this, params).fail((err) ->\n        linking.linkItem item, lookup\n        err\n      ).callback callback\n\n  # Hook into Item.create to register items being serialized from a cache.\n  wrapMethod Item, 'create', (create) ->\n    (request, data) ->\n      item = create.call(this, request, data)\n      linking.linkItem(item, lookup) if item.href\n      item\n\n  # Hook into item.deserialize to only ever return one copy of an item\n  wrapMethod Item.prototype, 'deserialize', (deserialize) ->\n    (data) ->\n      data = data.collection.items?[0] if data?.collection\n      item = lookup[data.href] or this\n      deserialize.call(item, data)\n\n  # Hook into item.serialize to only save changed fields when updating\n  wrapMethod Item.prototype, 'serialize', (serialize) ->\n    (template) ->\n      body = serialize.call(this, template)\n      if (state = @_state)\n        body.template.data = body.template.data.filter (field) ->\n          oldValue = state[camelize field.name]\n          value = field.value\n          isSame =\n            value is oldValue or\n            (value and oldValue and value.valueOf() is oldValue.valueOf())\n          not isSame\n      body\n\n  # Save an item's current state, probably shouldn't be used explicitly\n  Item::saveState = ->\n    @_state = { _undos: [] }\n    copy(this, @_state) if @href\n    this\n\n  # Rolls an item back to its last saved state, use if a user \"cancels\" changes\n  Item::rollback = ->\n    @_state._undos.reverse().forEach (undo) -> undo()\n    @_state._undos.length = 0\n    copy(@_state, this)\n\n  # Links an item with another before save, including setting the foreign id on\n  # the item. `item.rollback()` will undo links made before a save.\n  Item::link = (rel, item) ->\n    @saveState() unless @_state\n    undos = @_state._undos\n    if @[rel]\n      related = @[rel]\n      linking.unlinkItemFrom(this, @[rel])\n      undos.push =>\n        @[rel] = related\n        @[rel + 'Id'] = related.id\n        linking.linkItemWith(this, related)\n    @[rel] = item\n    if item\n      @[rel + 'Id'] = item.id\n      linking.linkItemWith(this, item)\n      undos.push =>\n        delete @[rel]\n        delete @[rel + 'Id']\n        linking.unlinkItemFrom(this, item)\n    this\n\n\nrevertModel = ->\n  revertWrapMethod MetaList.prototype, '_request'\n  revertWrapMethod ScopedCollection.prototype, 'save'\n  revertWrapMethod Item.prototype, 'delete'\n  revertWrapMethod Item, 'create'\n  revertWrapMethod Item.prototype, 'deserialize'\n  revertWrapMethod Item.prototype, 'serialize'\n  delete Item::saveState\n  delete Item::rollback\n  delete Item::link\n\n\n\nmodifySDK = (sdk) ->\n  # 1. saveMember needs to load avails and trackedItemStatuses when new\n  # 2. deleteMember needs to remove avails, trackedItemStatuses, assignments,\n  # emails, phones, contacts, contact emails, and contact phones\n  # 2. deleteContact needs to remove emails and phones\n  # 3. saveEvent needs to load avails when new\n  # 4. deleteEvent needs to remove avails and assignments\n  # 7. deleteEvent needs to remove other events when using include\n  # 5. saveTrackedItem needs to load trackedItemStatuses when new\n  # 6. deleteTrackedItem needs to remove trackedItemStatuses\n  # 8. deleteTeam needs to remove all related data except plan and sport\n\n  # Load the availabilities and trackedItemStatuses for the new member\n  wrapSaveForNew sdk, 'saveMember', (member) ->\n    promises.when(\n      sdk.loadAvailabilities memberId: member.id\n      sdk.loadTrackedItemStatuses memberId: member.id\n      sdk.loadCustomData memberId: member.id\n    )\n\n  # Remove related records when a member is deleted\n  wrapMethod sdk, 'deleteMember', (deleteMember) ->\n    (member, callback) ->\n      toRemove = []\n      toRemove.push member.assignments...\n      toRemove.push member.availabilities...\n      member.contacts.forEach (contact) ->\n        toRemove.push contact.contactEmailAddresses...\n        toRemove.push contact.contactPhoneNumbers...\n        toRemove.push contact\n      toRemove.push member.trackedItemStatuses...\n\n      linking.unlinkItems toRemove, lookup\n      deleteMember.call(this, member, callback).fail((err) ->\n        linking.linkItems toRemove, lookup\n        err\n      ).callback callback\n\n  # Remove related records when a contact is deleted\n  wrapMethod sdk, 'deleteContact', (deleteContact) ->\n    (contact, callback) ->\n      toRemove = []\n      toRemove.push contact.contactEmailAddresses...\n      toRemove.push contact.contactPhoneNumbers...\n\n      linking.unlinkItems toRemove, lookup\n      deleteContact.call(this, contact, callback).fail((err) ->\n        linking.linkItems toRemove, lookup\n        err\n      ).callback callback\n\n  # Load availabilities for the new event\n  wrapSaveForNew sdk, 'saveEvent', (event) ->\n    ids = if Array.isArray(event)\n      (event.map (event) -> event.id).join(',')\n    else\n      event.id\n    sdk.loadAvailabilities eventId: ids\n\n  # Remove related records (including repeating events) when an event(s) are\n  # deleted\n  wrapMethod sdk, 'deleteEvent', (deleteEvent) ->\n    (event, include, callback) ->\n      events = [] # additional events and items to remove\n\n      # Add all events being deleted\n      if typeof include is 'string' and include isnt sdk.EVENTS.NONE\n        uuid = event.repeatingUuid\n        startDate = event.startDate\n\n        event.team?.events?.forEach (event) ->\n          events.push(event) if event.repeatingUuid is uuid\n        \n        if include is sdk.EVENTS.FUTURE\n          events = events.filter (event) ->\n            event.startDate >= startDate\n      else\n        events.push event\n\n      # Add all items (events, assignments, and availabilities) to remove\n      toRemove = events.slice()\n      events.forEach (event) ->\n        toRemove.push event.assignments...\n        toRemove.push event.availabilities...\n\n      linking.unlinkItems toRemove, lookup\n      deleteEvent.call(this, event, include, callback).fail((err) ->\n        linking.linkItems toRemove, lookup\n        err\n      ).callback callback\n\n  # Load the tracked item statuses for the new tracked item\n  wrapSaveForNew sdk, 'saveTrackedItem', (trackedItem) ->\n    sdk.loadTrackedItemStatuses trackedItemId: trackedItem.id\n\n  # Remove tracked item statuses when a tracked item is deleted\n  wrapMethod sdk, 'deleteTrackedItem', (deleteTrackedItem) ->\n    (trackedItem, callback) ->\n      toRemove = trackedItem.trackedItemStatuses.slice()\n\n      linking.unlinkItems toRemove, lookup\n      deleteTrackedItem.call(this, trackedItem).fail((err) ->\n        linking.linkItems toRemove, lookup\n        err\n      ).callback callback\n\n  # Remove all records belonging to a team when it is deleted\n  wrapMethod sdk, 'deleteTeam', (deleteTeam) ->\n    (team, callback) ->\n      toRemove = []\n      team.links.each (rel) ->\n        value = team[name]\n        if types.getType(rel) and rel isnt 'sport' and rel isnt 'plan'\n          if Array.isArray value\n            toRemove.push(value...)\n          else\n            toRemove.push(value)\n      deleteTeam.call(this, team).then((result) ->\n        linking.unlinkItems toRemove, lookup\n        result\n      ).callback callback\n\n\n\nrevertSDK = (sdk) ->\n  revertWrapMethod sdk, 'saveMember'\n  revertWrapMethod sdk, 'deleteMember'\n  revertWrapMethod sdk, 'deleteContact'\n  revertWrapMethod sdk, 'saveEvent'\n  revertWrapMethod sdk, 'deleteEvent'\n  revertWrapMethod sdk, 'saveTrackedItem'\n  revertWrapMethod sdk, 'deleteTrackedItem'\n  revertWrapMethod sdk, 'deleteTeam'\n\n\n\n\n# Replace a method with a new one, providing it for calling\nwrapMethod = (obj, methodName, newMethodProvider) ->\n  oldMethod = obj[methodName]\n  obj[methodName] = newMethodProvider oldMethod\n  obj[methodName].oldMethod = oldMethod\n  obj\n\n# Revert a wrapMethod that was called earlier\nrevertWrapMethod = (obj, methodName) ->\n  oldMethod = obj[methodName].oldMethod\n  obj[methodName] = oldMethod\n\n# Wraps an SDK save call to do extra work after a save is complete\nwrapSaveForNew = (sdk, saveMethodName, onSave) ->\n  wrapMethod sdk, saveMethodName, (save) ->\n    (item, callback) ->\n      if item.id\n        save.call(this, item, callback)\n      else\n        savedItem = null\n        save.call(this, item)\n          .then((item) -> savedItem = item)\n          .then(onSave)\n          .then(-> savedItem)\n          .callback callback\n\n\ncopy = (from, to) ->\n  Object.keys(from).forEach (key) ->\n    return if typeof value is 'function' or key.charAt(0) is '_'\n    to[key] = from[key]\n  to\n\ncamelize = (str) ->\n  str.replace /[-_]+(\\w)/g, (_, char) ->\n    char.toUpperCase()\n","# if not used in modules allow use in global scope\npromises = if typeof exports isnt 'undefined' then exports else this\n\n# The promise of a an action to be resolved with methods to respond to that\n# action after it is finished. The action may happen synchronously or\n# asynchronously.\n\nclass Promise\n\n  # Allows responding to an action once it is resolved or rejected. Allows\n  # responding to progress updates as well. A promise may or may not choose to\n  # provide progress updates.\n  then: (resolvedHandler, rejectedHandler, progressHandler, cancelHandler) ->\n    throw new TypeError 'The Promise base class is abstract, this function is\n      overwritten by the promise\\'s deferred object'\n\n  callback: (callback) ->\n    if callback and typeof callback is 'function'\n      @then (results...) ->\n        callback null, results...\n      , (err) ->\n        callback err\n    this\n\n  # Specific method for only passing a resolved handler.\n  resolved: (handler) -> @then handler\n  done: (handler) -> @then handler\n\n\n  # Specific method for only passing a rejected handler.\n  rejected: (handler) -> @then null, handler\n  fail: (handler) -> @then null, handler\n\n\n  # Handler called whever this promise is resolved or rejected.\n  always: (handler) ->\n    resolvedHandler = (res) -> handler(null, res)\n    rejectedHandler = (err) -> handler(err)\n    @then resolvedHandler, rejectedHandler\n\n\n  # Specific method for only passing a progress handler.\n  progress: (handler) -> @then null, null, handler\n\n\n  # Specific method for only passing a canceled handler.\n  canceled: (handler) -> @then null, null, null, handler\n\n\n\n  # Apply the promise's result array to the handler optionally providing a\n  # context.\n  #\n  # @param handler resolved handler\n  # @param [context] Optional context object\n\n  apply: (handler, context) ->\n    @then (result) ->\n      if (result instanceof Array) handler.apply context or this, result\n      else handler.call context or this, result\n\n\n\n\n  # Allows the cancellation of a promise. Some promises are cancelable and so\n  # this method may be created on\n  # subclasses of Promise to allow a consumer of the promise to cancel it.\n  #\n  # @return {String|Error} Error string or object to provide to rejectHandlers\n\n  cancel: ->\n    throw new TypeError 'The Promise base class is abstract, this function is\n      overwritten by the promise\\'s deferred object'\n\n\n  # A shortcut to return the value of a property from the returned promise\n  # results. The same as providing your own\n  # <code>promise.then (obj) -> obj.propertyName</code> method.\n  #\n  # @param {String} propertyName The name of the property to return\n  # @return {Promise} The new promise for the property value\n\n  get: (propertyName) ->\n    @then (object) ->\n      object?[propertyName]\n\n\n\n\n  # A shortcut to set the property from the returned promise results to a\n  # certain value. The same as providing your\n  # own <code>promise.then (obj) -> obj.propertyName = value; return obj</code>\n  # method. This returns the\n  # original promise results after setting the property as opposed to\n  # <code>put</code> which returns the value which\n  # was set.\n  #\n  # @param {String} propertyName The name of the property to set\n  # @param {mixed} value The value for the property to be set to\n  # @return {Promise} A new promise with the original results\n\n  set: (propertyName, value) ->\n    @then (object) ->\n      object?[propertyName] = value\n      return object\n\n\n\n  # A shortcut to set the property from the returned promise results to a\n  # certain value. The same as providing your own <code>promise.then (obj) ->\n  # return obj.propertyName = value</code> method. This returns the new value\n  # after setting the property as opposed to <code>set</code> which returns the\n  # original promise results.\n  #\n  # @param {String} propertyName The name of the property to set\n  # @param {mixed} value The value for the property to be set to\n  # @return {Promise} A new promise with the value\n\n  put: (propertyName, value) ->\n    @then (object) ->\n      object?[propertyName] = value\n\n\n\n  # A shortcut to call a method on the returned promise results. The same as\n  # providing your own <code>promise.then (obj) -> obj.functionName(); return\n  # obj</code> method. This returns the original results after calling the\n  # function as opposed to <code>call</code> which returns the function's\n  # results.\n  #\n  # @param {String} functionName The name of the function to call\n  # @param {mixed} [...arguments] Zero or more arguments to pass to the function\n  # @return {Promise} A new promise with the original results\n\n  run: (functionName, params...) ->\n    @then (object) ->\n      object?[functionName] params...\n      return object\n\n\n\n  # A shortcut to call a method on the returned promise results. The same as\n  # providing your own <code>promise.then (obj, rest...) -> obj.functionName\n  # rest...</code> method. This returns the function's results after calling the\n  # function as opposed to <code>run</code> which returns the original results.\n  #\n  # @param {String} functionName The name of the function to call\n  # @param {mixed} [...arguments] Zero or more arguments to pass to the function\n  # @return {Promise} A new promise with the original results\n\n  call: (functionName, params...) =>\n    @then (object) ->\n      object[functionName](params...)\n\n\n# Add array methods which have a return result onto promise for async array\n# handling\n['pop', 'shift', 'splice', 'filter', 'every', 'map', 'some'].forEach (method) ->\n  Promise::[method] = (args...) ->\n    @then (object) ->\n      object?[method]?(args...)\n\n# Add array methods which have no return onto promise for async array handling\n['push', 'reverse', 'sort', 'unshift', 'forEach'].forEach (method) ->\n  Promise::[method] = (args...) ->\n    @then (object) ->\n      if object instanceof Array then object[method](args...)\n      return object\n\n\nPromise.extend = (methods) ->\n  SubPromise = ->\n  SubPromise.extend = @extend\n  SubPromise.prototype = new @()\n  if methods\n    for own name, value of methods\n      SubPromise::[name] = value\n  SubPromise\n\n# Combines one or more methods behind a promise. If the methods return a promise\n# <code>when</code> will wait until they are finished to complete its promise.\n#\n# Example:\n# <code>when(method1(), method2()).then (result1, result2) -> # handle...</code>\n# both methods have finished and the results from their promises are available\n\npromises.when = (params...) ->\n  deferred = promises.defer()\n  count = params.length\n  rejected = false\n  resolvedCallback = ->\n  rejectedCallback = (value) ->\n    rejected = true\n    value\n\n  createCallback = (index) ->\n    (results...) ->\n      params[index] = if results.length > 1 then results else results[0]\n\n      if --count is 0\n        if rejected\n          deferred.reject params...\n        else\n          deferred.resolve params...\n\n\n  for obj, name in params\n    if obj and typeof obj.then is 'function'\n      alwaysCallback = createCallback(name)\n      obj.then resolvedCallback, rejectedCallback\n      obj.then alwaysCallback, alwaysCallback\n    else\n      --count\n\n  if count is 0\n    deferred.resolve params...\n\n  deferred.promise\n\n\n\n# Allows returning multiple values from a method that will be passed in as\n# arguments in any methods handling the promise.\n#\n# @param ...arguments to be passed in\n\nargs = (params...) ->\n  params.isArgs = true\n  params\n\n\n\n# Represents a deferred action with an associated promise.\n#\n# @param promise Allow for custom promises to be used with deferred.\n\nclass Deferred\n  constructor: (promise = new promises.Promise) ->\n    @promise = promise\n    @status = 'pending'\n    @progressHandlers = []\n    @handlers = []\n\n    # overwrite the promise's then with the deferred's for deferred to handle\n    promise.then = @then\n    promise.cancel = @cancel\n    promise.getStatus = => @status\n\n\n  # handle a promise whether it was resolved, rejected, and/or its progress\n  then: (resolvedHandler, rejectedHandler, progressHandler, canceledHandler) =>\n    for handler in arguments\n      if handler? and typeof handler isnt 'function'\n        throw new Error('Promise handlers must be functions')\n\n    @progressHandlers.push(progressHandler) if progressHandler\n    nextDeferred = promises.defer()\n    nextDeferred.promise.prev = @.promise\n    @_addHandler(resolvedHandler, rejectedHandler, canceledHandler)\n      .nextDeferred = nextDeferred\n    if @finished()\n      handler = @handlers.pop()\n      method = handler[@status]\n      deferred = handler.nextDeferred\n      unless method\n        deferred[@status](@results...)\n      else\n        nextResult = method(@results...)\n        if nextResult and typeof nextResult.then is 'function'\n          nextResult.then deferred.resolve, deferred.reject\n        else\n          deferred[@status](nextResult)\n    return nextDeferred.promise\n\n\n  # whether or not the deferred is finished processing\n  finished: => @status != 'pending'\n\n\n  # successfully resolve this deferred's promise.\n  resolve: (results...) =>\n    return if @status isnt 'pending'\n    if results[0]?.isArgs then results = results[0]\n    clearTimeout @_timeout\n    @status = 'resolve'\n    @results = results\n    while (handler = @handlers.shift())\n      method = handler[@status]\n      deferred = handler.nextDeferred\n      unless method\n        deferred[@status](@results...)\n      else\n        nextResult = method(@results...)\n        if nextResult and typeof nextResult.then is 'function'\n          nextResult.then deferred.resolve, deferred.reject\n        else\n          deferred[@status](nextResult)\n    return\n\n\n  # reject this deferred's promise\n  reject: (results...) =>\n    return if @status isnt 'pending'\n    if results[0]?.isArgs then results = results[0]\n    clearTimeout @_timeout\n    @status = 'reject'\n    @results = results\n    while (handler = @handlers.shift())\n      method = handler[@status]\n      deferred = handler.nextDeferred\n      unless method\n        deferred[@status](@results...)\n      else\n        nextResult = method(@results...)\n        if nextResult and typeof nextResult.then is 'function'\n          nextResult.then deferred.resolve, deferred.reject\n        else\n          deferred[@status](nextResult)\n    return\n\n\n  # cancel this deferred's promise\n  cancel: (results...) =>\n    return if @status isnt 'pending'\n    if results[0]?.isArgs then results = results[0]\n    clearTimeout @_timeout\n    @status = 'cancel'\n    @results = results\n    while (handler = @handlers.shift())\n      method = handler[@status]\n      deferred = handler.nextDeferred\n      unless method\n        deferred[@status](@results...)\n      else\n        nextResult = method(@results...)\n        if nextResult and typeof nextResult.then is 'function'\n          nextResult.then deferred.resolve, deferred.reject\n        else\n          deferred[@status](nextResult)\n    @promise.prev?.cancel()\n    return\n\n\n  # update progress on this deferred's promise\n  progress: (params...) =>\n    for progress in @progressHandlers\n      progress params...\n\n\n  # set a timeout for this deferred to auto-reject\n  timeout: (milliseconds, error) ->\n    clearTimeout @_timeout\n\n    @_timeout = setTimeout =>\n      @reject error ? new Error 'Operation timed out'\n    , milliseconds\n\n\n  # reset this deferred dropping all handlers and resetting status\n  reset: ->\n    @status = 'pending'\n    @progressHandlers = []\n    @handlers = []\n\n\n  _addHandler: (resolvedHandler, rejectedHandler, canceledHandler) ->\n    handler =\n      resolve: resolvedHandler\n      reject: rejectedHandler\n      cancel: canceledHandler\n    @handlers.push(handler)\n    handler\n\n\npromises.Deferred = Deferred\npromises.Promise = Promise\npromises.args = args\n\n# returns a new instance of Deferred\npromises.defer = (promise) -> new promises.Deferred(promise)\n\n# call a method that takes a callback returning the promise\npromises.wrap = (method, PromiseClass) ->\n  (args...) ->\n    promise = if PromiseClass then new PromiseClass()\n    deferred = promises.defer promise\n    if typeof args[args.length - 1] is 'function'\n      callback = args.pop()\n\n    args.push (err, result) ->\n      extras = Array::slice.call(arguments, 2)\n      callback(err, result, extras...) if callback\n      if err then deferred.reject err else deferred.resolve result, extras...\n\n    method.apply @, args\n    deferred.promise\n\n# shortcuts to create synchronous rejected and resolved promises, e.g. for\n# cached results\npromises.resolve = (args...) ->\n  deferred = promises.defer()\n  deferred.resolve args...\n  deferred.promise\n\npromises.reject = (args...) ->\n  deferred = promises.defer()\n  deferred.reject args...\n  deferred.promise\n","# use node.js version when in node\nif typeof XMLHttpRequest is 'undefined'\n  global.XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest\npromises = require './promises'\n\n# Request\nsendRequest = (method, url, data, hooks, callback) ->\n  # Query string\n  if data and method.toUpperCase() is 'GET'\n    query = []\n    for key, value of data\n      query.push encodeURIComponent(key) + '=' + encodeURIComponent(value)\n    if query.length\n      url += if url.indexOf('?') is -1 then '?' else '&'\n      url += query.join('&')\n  else if typeof data is 'object'\n    data = JSON.stringify data\n\n  xhr = new XMLHttpRequest()\n  xhr.open(method.toUpperCase(), url)\n  if hooks\n    hook(xhr, data) for hook in hooks\n  deferred = promises.defer()\n  xhr.onreadystatechange = ->\n    switch xhr.readyState\n      when 3\n        deferred.progress(xhr)\n      when 4\n        unless xhr.hasOwnProperty 'response'\n          try\n            xhr.response = JSON.parse xhr.responseText\n          catch e\n            xhr.response = null\n\n        if xhr.status >= 400\n          errorMsg = xhr.response?.collection?.error?.message or ''\n\n        if xhr.status is 0\n          return promises.defer().promise if unloading\n          deferred.reject new RequestError(RequestError.CONNECTION_ERROR,\n            'Could not connect to the server'), xhr, errorMsg\n        else if xhr.status >= 500\n          console.error \"TeamSnap API error: #{errorMsg}\" if global.console\n          deferred.reject new RequestError(RequestError.SERVER_ERROR, 'Error\n            with the server'), xhr, errorMsg\n        else if xhr.status > 400\n          deferred.reject new RequestError(RequestError.CLIENT_ERROR, 'There\n            was an error with the request'), xhr, errorMsg\n        else if xhr.status is 400\n          deferred.reject new RequestError(RequestError.VALIDATION_ERROR,\n            errorMsg or 'The data was invalid'), xhr\n        else\n          deferred.resolve xhr\n\n  xhr.send(data or null)\n  deferred.promise.callback callback\n\n\ncreateRequest = (hooks = []) ->\n  request = (method, url, data, callback) ->\n    if typeof data is 'function'\n      callback = data\n      data = null\n    sendRequest method, url, data, hooks, callback\n  request.get = (url, params, callback) ->\n    request 'get', url, params, callback\n  request.post = (url, params, callback) ->\n    request 'post', url, params, callback\n  request.put = (url, params, callback) ->\n    request 'put', url, params, callback\n  request.delete = (url, params, callback) ->\n    request 'delete', url, params, callback\n  request.create = ->\n    createRequest()\n  request.clone = ->\n    createRequest hooks.slice()\n  request.reset = ->\n    hooks = []\n    this\n  request.hook = (hook) ->\n    hooks.push hook\n    this\n  request.removeHook = (hook) ->\n    index = hooks.indexOf hook\n    hooks.splice(index, 1) if index isnt -1\n    this\n  return request\n\n\nmodule.exports = createRequest()\n\n\n# Error class\nclass RequestError extends Error\n  @CONNECTION_ERROR: 1\n  @SERVER_ERROR: 2\n  @CLIENT_ERROR: 3\n  @VALIDATION_ERROR: 4\n\n  constructor: (@code, @message) ->\n    super()\n    @name = 'RequestError'\n\n\n# Don't give errors when unloading the page\nif typeof window isnt 'undefined'\n  unloading = false\n  window.addEventListener 'beforeunload', ->\n    unloading = true\n    return\n","teamsnap = require './teamsnap'\npromises = require './promises'\nloadCollections = require './loadCollections'\n{ Item, ScopedCollection } = require './model'\nurlExp = /^https?:\\/\\//\n\n\nmodule.exports = (request, cachedCollections, callback) ->\n  if typeof cachedCollections is 'function'\n    callback = cachedCollections\n    cachedCollections = null\n  \n  loadCollections(request, cachedCollections).then (collections) ->\n    sdk = createSDKObject(request, collections)\n    sdk.plans = collections.plans.items\n    sdk.sports = collections.sports.items\n    \n    sdk.collections.root.loadItem('me').then((me) ->\n      sdk.me = me\n      sdk\n    ).callback callback\n\n\n\ncreateSDKObject = (request, collections) ->\n  scopedCollections = {}\n  Object.keys(collections).forEach (name) ->\n    collection = collections[name]\n    scopedCollections[name] = new ScopedCollection request, collection\n  \n  sdk =\n    when: promises.when\n    request: request\n    collections: scopedCollections\n\n    # Utility methods for loading, creating, saving, and deleting items\n    loadItems: (type, params, callback) ->\n      unless @hasType type\n        throw new TSArgsError 'teamsnap.load*', 'must provide a valid `type`'\n      collection = @getCollectionForItem type\n      collection.queryItems 'search', params, callback\n    \n\n    loadItem: (type, params, callback) ->\n      unless @hasType type\n        throw new TSArgsError 'teamsnap.load*', 'must provide a valid `type`'\n      collection = @getCollectionForItem type\n      collection.queryItem 'search', params, callback\n\n\n    createItem: (properties, defaults) ->\n      unless properties\n        properties = defaults\n        defaults = null\n      if defaults\n        properties = mergeDefaults(properties, defaults)\n      unless @isItem properties\n        throw new TSArgsError 'teamsnap.create*', 'must include a valid `type`'\n      Item.create @request, properties\n\n\n    saveItem: (item, callback) ->\n      unless @isItem item\n        throw new TSArgsError 'teamsnap.save*', 'must include a valid `type`'\n      collection = @getCollectionForItem item\n      collection.save item, callback\n\n\n    deleteItem: (item, params, callback) ->\n      if typeof item is 'string' and urlExp.test item\n        item = href: item\n      unless typeof item?.href is 'string' and urlExp.test item.href\n        throw new TSArgsError 'teamsnap.delete*', 'item must have a valid href\n          to delete'\n\n      item = Item.create(@request, item) unless item instanceof Item\n      item.delete params, callback\n\n\n    getCollectionForItem: (item) ->\n      type = if typeof item is 'string' then item else item.type\n      collectionName = @getPluralType type\n      @collections[collectionName]\n\n    # Helpers\n    isId: (value) ->\n      typeof value is 'string' or typeof value is 'number'\n\n    isItem: (value, type) ->\n      @hasType(value?.type) and (not type or value.type is type)\n\n    reject: (msg, field, callback) ->\n      promises.reject(new TSValidationError msg, field).callback callback\n\n\n  add = (module) ->\n    for key, value of module\n      sdk[key] = value\n\n  add require './types'\n  \n  # Only add these two methods from linking\n  linking = require './linking'\n  sdk.linkItems = linking.linkItems\n  sdk.unlinkItems = linking.unlinkItems\n\n  add require './persistence'\n  add require './collections/teams'\n  add require './collections/assignments'\n  add require './collections/availabilities'\n  add require './collections/contactEmailAddresses'\n  add require './collections/contactPhoneNumbers'\n  add require './collections/contacts'\n  add require './collections/customData'\n  add require './collections/customFields'\n  add require './collections/events'\n  add require './collections/locations'\n  add require './collections/memberEmailAddresses'\n  add require './collections/memberLinks'\n  add require './collections/memberPhoneNumbers'\n  add require './collections/memberPreferences'\n  add require './collections/members'\n  add require './collections/opponents'\n  add require './collections/plans'\n  add require './collections/sports'\n  add require './collections/teamPreferences'\n  add require './collections/teamPublicSites'\n  add require './collections/trackedItems'\n  add require './collections/trackedItemStatuses'\n  add require './collections/users'\n  sdk\n\n\nmergeDefaults = (properties, defaults) ->\n  obj = {}\n  for own key, value of properties\n    unless typeof value is 'function' or key.charAt(0) is '_'\n      obj[key] = value\n  for own key, value of defaults\n    unless typeof value is 'function' or properties.hasOwnProperty key\n      obj[key] = value\n  obj","promises = require './promises'\nmodel = require './model'\nauth = require './auth'\nrequire './errors'\n\nteamsnap = exports\nteamsnap.Collection = model.Collection\nteamsnap.Item = model.Item\nteamsnap.promises = promises\nteamsnap.apiUrl = 'https://apiv3.teamsnap.com'\nteamsnap.authUrl = 'https://auth.teamsnap.com'\n\n# Returns a teamsnap object for authing users. Only provide the secret when\n# running on the server!\nteamsnap.init = (clientId, secret) ->\n  for name, method of auth clientId, secret\n    teamsnap[name] = method\n  teamsnap\n\nunless String::trim\n  String::trim = -> @replace /^\\s+|\\s+$/g, ''","teamsnap = exports\n\ntypes = [\n  'user'\n  'assignment'\n  'availability'\n  'contact'\n  'contactEmailAddress'\n  'contactPhoneNumber'\n  'customDatum'\n  'customField'\n  'event'\n  'location'\n  'member'\n  'memberEmailAddress'\n  'memberLink'\n  'memberPhoneNumber'\n  'memberPreferences'\n  'opponent'\n  'plan'\n  'sport'\n  'team'\n  'teamPreferences'\n  'teamPublicSite'\n  'trackedItem'\n  'trackedItemStatus'\n]\n\nteamTypes = types.slice(1)\n\n# create lookup hashes\ntypeLookup = {}\nsingularLookup = {}\n# pre-define exceptions\npluralLookup =\n  memberPreferences: 'membersPreferences'\n  teamPreferences: 'teamsPreferences'\n  customDatum: 'customData'\n\nfor type in types\n  plural = pluralLookup[type] or switch type.slice -1\n    when 'y' then type.slice(0, -1) + 'ies'\n    when 's' then type + 'es'\n    else type + 's'\n  typeLookup[type] = type\n  typeLookup[plural] = type\n  singularLookup[plural] = type\n  pluralLookup[type] = plural\n\n\n# check if the name is the plural version or singular version (singularLookup\n# translates from non-singular to singular, so if it exists there, it's plural)\nteamsnap.isPluralType = (name) -> singularLookup.hasOwnProperty(name)\nteamsnap.isSingularType = (name) -> pluralLookup.hasOwnProperty(name)\n\nteamsnap.hasType = (type) -> typeLookup[type] isnt undefined\nteamsnap.getTypes = -> types.slice()\nteamsnap.getTeamTypes = -> teamTypes.slice()\nteamsnap.getPluralType = (name) -> pluralLookup[name]\nteamsnap.getSingularType = (name) -> singularLookup[name]\nteamsnap.getType = (name) -> typeLookup[name]\nteamsnap.camelcaseType = (type) ->\n  type.replace /[-_]+(\\w)/g, (_, char) ->\n    char.toUpperCase()\nteamsnap.underscoreType = (type) ->\n  type.replace /[A-Z]/g, (char) ->\n    '_' + char.toLowerCase()\n"]}